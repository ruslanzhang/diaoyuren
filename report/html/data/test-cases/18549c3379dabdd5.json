{
  "uid" : "18549c3379dabdd5",
  "name" : "test_login_failed[data1]",
  "fullName" : "cases.test_login.TestLogin#test_login_failed",
  "historyId" : "28fbee3f7849e5c692210a9f12e7fe96",
  "time" : {
    "start" : 1614504151584,
    "stop" : 1614504167318,
    "duration" : 15734
  },
  "status" : "broken",
  "statusMessage" : "TypeError: 'Log' object is not callable",
  "statusTrace" : "self = <pages.pages_action.PagesAction object at 0x000001C0A6842DA0>\nmsg = '账号或密码错误', timeout = 8, poll_frequency = 0.2\n\n    def is_toast_show(self, msg, timeout=20, poll_frequency=0.5):\n        \"\"\"\n    \n        :param msg: toast 中显示的文本中包含的内容\n        :param timeout:\n        :param poll_frequency:\n        :return:\n        \"\"\"\n        logger.info('waiting for toast element to show')\n        locator = (By.XPATH, \"//*[contains(@text, '%s')]\" % msg)\n        try:\n>           WebDriverWait(self.driver, timeout, poll_frequency).until(EC.presence_of_element_located(locator))\n\ncommon\\bases\\base_page.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"3ca092c8-0ba1-441c-b7b6-e94398b1d945\")>\nmethod = <selenium.webdriver.support.expected_conditions.presence_of_element_located object at 0x000001C0A68BB400>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nD:\\Python36\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <cases.test_login.TestLogin object at 0x000001C0A64FBE80>\nhandler = (<appium.webdriver.webdriver.WebDriver (session=\"3ca092c8-0ba1-441c-b7b6-e94398b1d945\")>, <pages.pages_action.PagesAction object at 0x000001C0A6842DA0>)\ndata = {'error_msg': '账号或密码错误', 'name': '登录功能-异常登录-用户名错误', 'password': '654321Ok', 'username': 'abc'}\n\n    @pytest.mark.parametrize('data', failed_data)\n    def test_login_failed(self, handler, data):\n        handler[1].agree_privacy()\n        handler[1].login(data['username'], data['password'])\n        logger.info('反向用例，登录失败')\n>       assert handler[1].is_toast_show(data['error_msg'], 8, 0.2)\n\ncases\\test_login.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.pages_action.PagesAction object at 0x000001C0A6842DA0>\nmsg = '账号或密码错误', timeout = 8, poll_frequency = 0.2\n\n    def is_toast_show(self, msg, timeout=20, poll_frequency=0.5):\n        \"\"\"\n    \n        :param msg: toast 中显示的文本中包含的内容\n        :param timeout:\n        :param poll_frequency:\n        :return:\n        \"\"\"\n        logger.info('waiting for toast element to show')\n        locator = (By.XPATH, \"//*[contains(@text, '%s')]\" % msg)\n        try:\n            WebDriverWait(self.driver, timeout, poll_frequency).until(EC.presence_of_element_located(locator))\n            return True\n        except Exception as e:\n            logger.warning('toast not found.')\n>           logger(e)\nE           TypeError: 'Log' object is not callable\n\ncommon\\bases\\base_page.py:87: TypeError",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ {
    "name" : "__pytest_repeat_step_number",
    "time" : {
      "start" : 1614504151583,
      "stop" : 1614504151583,
      "duration" : 0
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "prepare_to_login",
    "time" : {
      "start" : 1614504131792,
      "stop" : 1614504143642,
      "duration" : 11850
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  }, {
    "name" : "handler",
    "time" : {
      "start" : 1614504112954,
      "stop" : 1614504131791,
      "duration" : 18837
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "TypeError: 'Log' object is not callable",
    "statusTrace" : "self = <pages.pages_action.PagesAction object at 0x000001C0A6842DA0>\nmsg = '账号或密码错误', timeout = 8, poll_frequency = 0.2\n\n    def is_toast_show(self, msg, timeout=20, poll_frequency=0.5):\n        \"\"\"\n    \n        :param msg: toast 中显示的文本中包含的内容\n        :param timeout:\n        :param poll_frequency:\n        :return:\n        \"\"\"\n        logger.info('waiting for toast element to show')\n        locator = (By.XPATH, \"//*[contains(@text, '%s')]\" % msg)\n        try:\n>           WebDriverWait(self.driver, timeout, poll_frequency).until(EC.presence_of_element_located(locator))\n\ncommon\\bases\\base_page.py:83: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"3ca092c8-0ba1-441c-b7b6-e94398b1d945\")>\nmethod = <selenium.webdriver.support.expected_conditions.presence_of_element_located object at 0x000001C0A68BB400>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nD:\\Python36\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <cases.test_login.TestLogin object at 0x000001C0A64FBE80>\nhandler = (<appium.webdriver.webdriver.WebDriver (session=\"3ca092c8-0ba1-441c-b7b6-e94398b1d945\")>, <pages.pages_action.PagesAction object at 0x000001C0A6842DA0>)\ndata = {'error_msg': '账号或密码错误', 'name': '登录功能-异常登录-用户名错误', 'password': '654321Ok', 'username': 'abc'}\n\n    @pytest.mark.parametrize('data', failed_data)\n    def test_login_failed(self, handler, data):\n        handler[1].agree_privacy()\n        handler[1].login(data['username'], data['password'])\n        logger.info('反向用例，登录失败')\n>       assert handler[1].is_toast_show(data['error_msg'], 8, 0.2)\n\ncases\\test_login.py:28: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pages.pages_action.PagesAction object at 0x000001C0A6842DA0>\nmsg = '账号或密码错误', timeout = 8, poll_frequency = 0.2\n\n    def is_toast_show(self, msg, timeout=20, poll_frequency=0.5):\n        \"\"\"\n    \n        :param msg: toast 中显示的文本中包含的内容\n        :param timeout:\n        :param poll_frequency:\n        :return:\n        \"\"\"\n        logger.info('waiting for toast element to show')\n        locator = (By.XPATH, \"//*[contains(@text, '%s')]\" % msg)\n        try:\n            WebDriverWait(self.driver, timeout, poll_frequency).until(EC.presence_of_element_located(locator))\n            return True\n        except Exception as e:\n            logger.warning('toast not found.')\n>           logger(e)\nE           TypeError: 'Log' object is not callable\n\ncommon\\bases\\base_page.py:87: TypeError",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "12963e1e8c7700ae",
      "name" : "log",
      "source" : "12963e1e8c7700ae.txt",
      "type" : "text/plain",
      "size" : 23461
    } ],
    "parameters" : [ ],
    "hasContent" : true,
    "stepsCount" : 0,
    "shouldDisplayMessage" : true,
    "attachmentsCount" : 1
  },
  "afterStages" : [ {
    "name" : "handler::0",
    "time" : {
      "start" : 1614504198466,
      "stop" : 1614504198992,
      "duration" : 526
    },
    "status" : "passed",
    "steps" : [ ],
    "attachments" : [ ],
    "parameters" : [ ],
    "hasContent" : false,
    "stepsCount" : 0,
    "shouldDisplayMessage" : false,
    "attachmentsCount" : 0
  } ],
  "labels" : [ {
    "name" : "tag",
    "value" : "@pytest.mark.usefixtures('prepare_to_login')"
  }, {
    "name" : "parentSuite",
    "value" : "cases"
  }, {
    "name" : "suite",
    "value" : "test_login"
  }, {
    "name" : "subSuite",
    "value" : "TestLogin"
  }, {
    "name" : "host",
    "value" : "ruslan"
  }, {
    "name" : "thread",
    "value" : "2836-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "cases.test_login"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ {
    "name" : "data",
    "value" : "{'name': '登录功能-异常登录-用户名错误', 'username': 'abc', 'password': '654321Ok', 'error_msg': '账号或密码错误'}"
  } ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ "@pytest.mark.usefixtures('prepare_to_login')" ]
  },
  "source" : "18549c3379dabdd5.json",
  "parameterValues" : [ "{'name': '登录功能-异常登录-用户名错误', 'username': 'abc', 'password': '654321Ok', 'error_msg': '账号或密码错误'}" ]
}